@page "/viewdebt"
@using CourseWork1.Models
@using CourseWork1.Services
@inject ITransactions transactionsService
@inject AuthenticationService authenticateUser



@* to show the error  *@
@if (!string.IsNullOrEmpty(errormessage))
{
    <div class="error-overlay">
        <dialog class="error-dialog" open>
            <h2>Error</h2>
            <p>@errormessage</p>
            <button class="close-btn" @onclick="CloseDialog">❌</button>
        </dialog>
    </div>

}

@* contains the information related to the debt  *@
<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="col-md-5 border-right center-container">
        <div class="p-3 py-5">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h4 class="text-right">User Debt Details</h4>
            </div>

            <div class="row mt-3">
                <div class="col-md-12"><label class="labels">Total Debt</label><input type="text" class="form-control" value="@totalDebt" readonly></div>
                <div class="col-md-12"><label class="labels">Paid Debt</label><input type="text" class="form-control" value="@paidDebt" readonly></div>
                <div class="col-md-12"><label class="labels">Total Balance without Debt</label><input type="text" class="form-control" value="@totalBalance" readonly></div>
                <div class="col-md-12"><label class="labels">Pending Debt</label><input type="text" class="form-control" value="@pendingDebt" readonly style="background-color: #ffcccc; "></div>
            </div>
            <div class="mt-5 text-center"><button class="btn btn-primary profile-button" @onclick="Paydebt" type="button">Pay Debt </button></div>

        </div>
    </div>
</div>


@code {
    private List<Transaction> existingTransactions = new List<Transaction>();
    private List<Transaction> monthSpecificTransaction = new List<Transaction>();

    private Transaction newDebt = new Transaction();
    private DateTime Month;
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal paidDebt;
    private decimal totalDebt;
    private string errormessage;
    private string expenseMonth;

    private decimal pendingDebt;
    private decimal justPaid;
    private decimal totalBalance;

    //this method is run when this razor page is opened
    protected override async Task OnInitializedAsync()
    {
        try
        {
            int currentUserID = authenticateUser.GetCurrentUser().UserId;
            await CalculateTotals(currentUserID);
        }
        catch(Exception e)
        {
            errormessage = $"The error cccured is: {e.Message}";
        }

    }


    //to pay debt taken
    public async Task Paydebt()
    {
        try
        {
            //checking if the pending balance is greater than total balance or not
            if (pendingDebt > totalBalance )
            {
                throw new Exception("Cant pay debt without enough balance");

            }
            //checking if there are any debt or not
            if (pendingDebt ==0)
            {
                throw new Exception("No Pending Debt");

            }
            int currentUserID = authenticateUser.GetCurrentUser().UserId;
            //making a new transaction object so that paydebt can be cleared
            newDebt.User_id = currentUserID;
            newDebt.Amount = pendingDebt;
            newDebt.TransactionName = "Debt Pay";
            newDebt.TransactionType = "PaidDebt";
            newDebt.Tags = "DebtPay";
            newDebt.TransactionDate = DateTime.Now;
            totalIncome = totalIncome - pendingDebt;
            justPaid = pendingDebt;
            await transactionsService.AddTransactionsAsync(newDebt);
            newDebt = new Transaction();
            newDebt.TransactionDate = DateTime.Now;
            errormessage = null;
            await CalculateTotals(currentUserID);
        }
        catch(Exception e) //exception handling
        {
            errormessage = e.Message;
        }

    }

    //for closing the error bar
    private void CloseDialog()
    {
        try
        {
            errormessage = null;
        }
        catch (Exception e)
        {
            errormessage = e.Message;
        }
    }


    //calculating the totals
    public async Task CalculateTotals(int userId)
    {
        //calculation the values
        try
        {
            existingTransactions = await transactionsService.GetTransactionsByUserIdAsync(userId);
            totalIncome = existingTransactions.Where(t => t.TransactionType == "Income").Sum(t => t.Amount);
            totalExpense = existingTransactions.Where(t => t.TransactionType == "Expense").Sum(t => t.Amount);
            totalDebt = existingTransactions.Where(t => t.TransactionType == "Debt").Sum(t => t.Amount);
            paidDebt = existingTransactions.Where(t => t.TransactionType == "PaidDebt").Sum(t => t.Amount);
            totalIncome = totalIncome - paidDebt;
            totalBalance = totalIncome - totalExpense ;
            pendingDebt = totalDebt - paidDebt;
        }
        catch(Exception e)
        {
            errormessage = e.Message;
        }
    }

}
