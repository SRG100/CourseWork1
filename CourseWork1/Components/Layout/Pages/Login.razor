@page "/"
@using CourseWork1.Models
@using CourseWork1.Services
@inject IUserService userService
@inject NavigationManager navigationManager
@inject AuthenticationService authenticateUser

<div class="center-container">
    <MudContainer Width="MaxWidth.Medium">
        <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudItem xs="12" sm="6" lg="4">
                <MudPaper Class="pa-4" Elevation="2">
                    <MudForm @ref="loginForm" @bind-IsValid="@isValid">
                        <MudText Typo="Typo.h6">Login</MudText>
                        <MudTextField T="string" Label="Username" Required="true" Variant="Variant.Outlined" RequiredError="Username is required!" @bind-Value="username" />
                        <MudTextField T="string" Label="Password" InputType="InputType.Password" Required="true" Variant="Variant.Outlined" RequiredError="Password is required!" @bind-Value="password" />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@LoginUser">Login</MudButton>
                    </MudForm>
                    <MudText Typo="Typo.body1" Class="mt-4">
                        New here? <MudLink Href="register" Color="Color.Primary">Sign up</MudLink>
                    </MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" lg="4">
                <MudImage Src="../../../wwwroot/favicon.png" Alt="Mony the dog" Elevation="25" Class="rounded-lg" />
            </MudItem>
        </MudGrid>
    </MudContainer>
</div>

@code {
    private MudForm loginForm;
    private bool isValid;
    private string username;
    private string password;
    private string errorMessage;

    

    private async Task LoginUser()
    {
        await loginForm.Validate();
        if (!isValid)
        {
            return;
        }

        try
        {
            var users = await userService.GetAllUsersAsync();
            var user = users.FirstOrDefault(u => u.UserName == username && u.Password == HashPassword(password));

            if (user != null)
            {
                authenticateUser.SetCurrentUser(user);
                navigationManager.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error occurred during login: {ex.Message}";
        }
    }

    private string HashPassword(string password)
    {
        using (var sha256 = System.Security.Cryptography.SHA256.Create())
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(password);
            var hash = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hash);
        }
    }
}
