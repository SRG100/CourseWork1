@page "/dashboard"
@using CourseWork1.Models
@using CourseWork1.Services
@inject ITransactions transactionsService
@inject ITags tagService
@inject AuthenticationService authenticateUser


<h3>Dashboard</h3>

<div>
    <label>Choose a :</label>
    <input type="month"  @bind="Month" />
    <button type="button" @onclick="SelectMonth"> Filter Month </button>
</div>
<div>
    <h1>Income</h1>
    <h2 style="color:Green">Total Income Amount:@totalIncome</h2>
</div>
<div>
    <h1>Balance</h1>
    <h2 style="color:yellow">Current balance info:@totalBalance</h2>
</div>
<div>
    <h1>Expense</h1>
    <h2 style ="color:orange">Debit info:@totalExpense</h2>
</div>
<div>
    <h1>Debt</h1>
    <h2 style ="color:Red">Debt info:@totalDebt</h2>
</div>
<div>
    <h2 style ="color:darkred">Pending Debt:@pendingDebt</h2>
</div>
<div>
    <h2 style="color:saddlebrown">Paid Debt:@paidDebt</h2>
</div>


@if (errormessage != null)
{
    @errormessage
}

<table class="table">
    <thead>
        <tr>
            <th scope="col"> Transaction Name </th>

            <th scope="col"> TransactionType </th>
            <th scope="col">  TransactionDate </th>
            <th scope="col"> Tags</th>
            <th scope="col"> Note </th>
            <th scope="col">  Amount </th>
            <th scope ="col"> DebtSource</th>
            <th scope ="col">DebtDueDate</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var transaction in existingTransactions)
        {
            <tr scope="row">
                <td> @transaction.TransactionName </td>
                <td class="btn btn-outline-success"> @transaction.TransactionType </td>
                <td>@transaction.TransactionDate.ToString("yyyy-MM-dd")</td>

                <td> @transaction.Tags </td>
                @if (@transaction.Note == null)
                {
                    <td> NO NOTES </td>

                }
                else
                {
                    <td>
                        @transaction.Note
                    </td>
                }

                <td> <strong> @transaction.Amount.ToString()</strong></td>
                @if (transaction.TransactionType == "Income" || transaction.TransactionType == "Expense")
                {
                    <td>--NA--</td>
                    <td>--NA--</td>
                }
                else
                {
                    <td>@transaction.DebtDueDate.ToString("yyyy-MM-dd")</td>
                    <td>@transaction.DebtSource</td>
                }

            </tr>
        }
    </tbody>
</table>

@code {
    private List<Transaction> existingTransactions = new List<Transaction>(); //for list of transaction class
    private List<Transaction> monthSpecificTransaction = new List<Transaction>(); 

    private DateTime Month;
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal paidDebt;
    private decimal totalDebt;
    private string errormessage;
    private string expenseMonth;

    private decimal pendingDebt;
    private decimal totalBalance;


    //run all these when dashboard is first loaded
    protected override async Task OnInitializedAsync()
    {
        expenseMonth = Month.ToString("MMMM");
        int currentUserID = authenticateUser.GetCurrentUser().UserId;
        await CalculateTotals(currentUserID);
        Month = DateTime.Now;
        await SelectMonth();
    }
    //to select the specific month for filtering
    public async Task SelectMonth()
    {
        expenseMonth = Month.ToString("MMMM");
        errormessage = expenseMonth;
        int currentUserID = authenticateUser.GetCurrentUser().UserId;
        await CalculateTotals(currentUserID);

    }

    //to calculate the total transactions values
    public async Task CalculateTotals(int userId)
    {
        existingTransactions = await transactionsService.GetTransactionsByUserIdAsync(userId);//to get existing transactions based on the logged in user
        monthSpecificTransaction = existingTransactions.FindAll(et => et.TransactionDate.ToString("MMMM") == expenseMonth); // getting the transactions based on the month selected
        totalIncome = monthSpecificTransaction.Where(t => t.TransactionType == "Income").Sum(t => t.Amount);
        totalExpense = monthSpecificTransaction.Where(t => t.TransactionType == "Expense").Sum(t => t.Amount);
        totalDebt = monthSpecificTransaction.Where(t => t.TransactionType == "Debt").Sum(t => t.Amount);
        paidDebt = monthSpecificTransaction.Where(t => t.TransactionType == "PaidDebt").Sum(t => t.Amount);
        totalBalance = totalIncome - totalExpense + totalDebt; //adding total debt as well beacuse the user cant pay with the collected
        pendingDebt = totalDebt - paidDebt;
        existingTransactions = monthSpecificTransaction;
    }
}
