@page "/register"
@using CourseWork1.Models
@using CourseWork1.Services
@using MudBlazor

@inject IUserService userService

@inject NavigationManager navigationManager

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-overlay">
        <dialog class="error-dialog" open>
            <h2>Error</h2>
            <p>@errorMessage</p>
            <button class="close-btn" @onclick="CloseDialog">❌</button>
        </dialog>
    </div>

}
@* use of mudblazor for register form *@
<MudContainer Width="MaxWidth.Medium" Class="mt-4">
    <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudItem xs="12" sm="6" lg="4">
            <MudPaper Class="pa-4" Elevation="2">
                <MudForm @ref="registerForm" @bind-IsValid="@isValid">
                    <MudText>Register</MudText>
                    <MudTextField T="string" Label="Full Name" Required="true" Variant="Variant.Outlined" RequiredError="Full Name is required!" @bind-Value="newUser.FullName" />
                    <MudTextField T="string" Label="Username" Required="true" Variant="Variant.Outlined" RequiredError="Username is required!" @bind-Value="newUser.UserName" />
                    <MudTextField T="string" Label="Password" InputType="InputType.Password" Required="true" Variant="Variant.Outlined" RequiredError="Password is required!" @bind-Value="newUser.Password" />
                    @* For gender and email *@
                    <MudGrid Spacing="2">
                        <MudItem xs="6">
                            <MudTextField T="string" Label="Gender" Required="true" Variant="Variant.Outlined" RequiredError="Gender is required!" @bind-Value="newUser.Gender" />

                        </MudItem>

                        <MudItem xs="6">
                            <MudTextField T="string" Label="Email" Required="true" Variant="Variant.Outlined" RequiredError="Email is required!" @bind-Value="newUser.Email" />
                        </MudItem>
                    </MudGrid>
                    @* For phone number and address *@
                    <MudGrid Spacing="2">
                        <MudItem xs="6">
                            <MudTextField T="string" Label="Phone Number" Required="true" Variant="Variant.Outlined" RequiredError="Phone Number is required!" @bind-Value="newUser.PhoneNumber" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField T="string" Label="Address" Required="true" Variant="Variant.Outlined" RequiredError="Address is required!" @bind-Value="newUser.Address" />
                        </MudItem>
                    </MudGrid>
                    @* For job position and currency *@
                    <MudGrid Spacing="2">
                        <MudItem xs="6">
                            <MudTextField T="string" Label="Job Position" Required="true" Variant="Variant.Outlined"
                            RequiredError="Job Position is required!" @bind-Value="newUser.JobPosition" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField T="string" Label="Currency" Required="true" Variant="Variant.Outlined"
                            RequiredError="Currency is required!" @bind-Value="newUser.Currency" />

                        </MudItem>
                    </MudGrid>



                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@RegisterUser">Register</MudButton>
                </MudForm>

                <MudText Typo="Typo.body1" Class="mt-4">
                    Already have an account? <MudLink Href="/" Color="Color.Primary">Login</MudLink>
                </MudText>
            </MudPaper>
        </MudItem>
        @* <MudItem xs="12" sm="6" lg="4"> *@
        @*     <MudImage Src="NewFolder\loginsign.png" Alt="Registration" Elevation="25" Class="rounded-lg" /> *@
        @* </MudItem> *@
    </MudGrid>
</MudContainer>

@code {
    private MudForm registerForm;
    private bool isValid;
    private string errorMessage;
    private User newUser = new User();

    //used to close the error message that pop-uped
    private void CloseDialog()
    {
        try
        {
            errorMessage = null;
        }
        catch(Exception e)
        {
            errorMessage = $"Error while closing the Close Dialog{e.Message}";
        }

    }

    //after clicking on register, registers new user into the user json file
    private async Task RegisterUser()
    {
    
        try
        {
            //ckeckinhg for null values
            if (string.IsNullOrWhiteSpace(newUser.FullName) ||
                string.IsNullOrWhiteSpace(newUser.Gender) ||
                string.IsNullOrWhiteSpace(newUser.Email) ||
                string.IsNullOrWhiteSpace(newUser.UserName) ||
                string.IsNullOrWhiteSpace(newUser.Password) ||
                string.IsNullOrWhiteSpace(newUser.PhoneNumber) ||
                string.IsNullOrWhiteSpace(newUser.Address) ||
                string.IsNullOrWhiteSpace(newUser.JobPosition) ||
                string.IsNullOrWhiteSpace(newUser.Currency))
            {
                throw new Exception("All fields are required!");
            }

            var existingUsers = await userService.GetAllUsersAsync();
            //checking for similar user name
            if (existingUsers != null && existingUsers.Any(u => u.UserName == newUser.UserName))
            {
                throw new Exception("Username already exists. Please choose a different one.");
            }
            //checking for similar email
            if (existingUsers != null && existingUsers.Any(u => u.Email == newUser.Email))
            {
                throw new Exception("Email already exists. Please choose a different one.");
            }
            //adding the user
            await userService.SaveUserAsync(newUser);
            navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
