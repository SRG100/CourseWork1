@page "/addtransaction"
@using CourseWork1.Models
@using CourseWork1.Services
@inject ITransactions transactionsService
@inject ITags tagService
@inject AuthenticationService authenticateUser


<div class="container">
    <div class="signup-content">
        <form id="transaction-form" class="signup-form">
            <h3 class="form-title">Add Transaction</h3>

            <div class="form-group">
                <label for="transaction-name">Transaction Name:</label>
                <input type="text" class="form-input" id="transaction-name" placeholder="" @bind="newTransaction.TransactionName" />

            </div>

            <div class="form-group">
                <label for="transaction-type">Transaction Type:</label>
                <select class="form-input" id="transaction-type" @bind="newTransaction.TransactionType">
                    <option value=""></option>
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                    <option value="Debt">Debt</option>
                </select>
            </div>

            <div class="form-group">
                <label for="transaction-amount">Transaction Amount:</label>
                <input type="number" class="form-input" id="transaction-amount" placeholder="Amount" @bind="newTransaction.Amount" />
            </div>

            <div class="form-group">
                <label for="transaction-date">Transaction Date:</label>
                <input type="date" class="form-input" id="transaction-date" placeholder="Transaction Date" @bind="newTransaction.TransactionDate" />
            </div>
            @if (!addnewTag)
            {
            <div class="form-group">
                <label for="transaction-tags">Select Tag:</label>
                <select class="form-input" id="transaction-tags" @bind="newTransaction.Tags">
                    <option value=""></option>
                    @foreach (var Tag in existingTags)
                    {
                        <option value="@Tag.TransactionTag">@Tag.TransactionTag</option>
                    }
                </select>
            </div>
            }

            @if (newTransaction.Tags == null && clicked==true)
            {
                <div class="form-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="AddCustomTagOption">Add Custom Tag :)</button>
                </div>
            }

            @if (addnewTag)
            {

                <div class="form-group">
                    <input type="text" class="form-input" placeholder="Add Tag" @bind="newTransaction.Tags" />
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="AddCustomTag">Add Tag</button>
                </div>
            }

            @if (newTransaction.TransactionType == "Debt")
            {
                <div class="form-group">
                    <label for="debt-source">Debt Source:</label>
                    <input type="text" class="form-input" id="debt-source" placeholder="Debt Source" @bind="newTransaction.DebtSource" />
                </div>

                <div class="form-group">
                    <label for="debt-due-date">Debt Due Date:</label>
                    <input type="date" class="form-input" id="debt-due-date" placeholder="Debt Due Date" @bind="newTransaction.DebtDueDate" />
                </div>
            }



            <div class="form-group">
                <input type="text" class="form-input" placeholder="Add Note(Optional)" @bind="newTransaction.Note" />
            </div>


            <div class="form-group">
                <button type="button" class="form-submit" @onclick="AddNewTransaction">Add Transaction</button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div id="popup1" class="overlay">
                    <div class="popup">
                        <h2>Error Message</h2>
                        <a class="close" href="#">&times;</a>
                        <div class="content">
                            @errorMessage
                        </div>
                    </div>
                </div>
            }
        </form>
    </div>
</div>




@code {
    private Transaction newTransaction = new Transaction();
    private string errorMessage;
    private Boolean addnewTag = false;
    private Boolean addNote = false;
    private Boolean clicked = true;
    private List<Tags> existingTags = new List<Tags>();
    private Tags newTag = new Tags();
    private decimal totalBalance;
    private decimal totalIncome;
    private decimal totalExpense;


    protected override async Task OnInitializedAsync()
    {
        existingTags = await tagService.GetTagsAsync();
        newTransaction.TransactionDate = DateTime.Now;
        newTransaction.DebtDueDate = DateTime.Now;
    }

    private async Task AddCustomTagOption()
    {
        addnewTag = true;
        clicked = false;

    }

    private async Task AddNote()
    {
        addNote = true;

    }
    private async Task AddCustomTag()
    {
        try
        {
            addnewTag = true;

            var existingTags = await tagService.GetTagsAsync();
            if (existingTags != null)
            {
                var sametag = existingTags.FirstOrDefault(et => et.TransactionTag == newTransaction.Tags);
                if (sametag != null)
                {
                    throw new Exception("This Tag exists, add a diffrent tag name");
                }

            }
            newTag.TransactionTag = newTransaction.Tags;
            await tagService.AddTagAsync(newTag);
            newTag = new Tags();
            errorMessage = "Tags Added";


        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }

    }


    private async Task AddNewTransaction()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newTransaction.Tags))
            {
                throw new Exception("Emply Space found, please insert data in all feild");
            }
            int currentUserID = authenticateUser.GetCurrentUser().UserId;
            newTransaction.User_id = currentUserID;
            var existingTransactionsOfUser = await transactionsService.GetTransactionsByUserIdAsync(currentUserID);
            totalIncome = existingTransactionsOfUser.Where(t => t.TransactionType == "Income").Sum(t => t.Amount);
            totalExpense = existingTransactionsOfUser.Where(t => t.TransactionType == "Expense").Sum(t => t.Amount);
            totalBalance = totalIncome - totalExpense;
            if (newTransaction.TransactionType == "Expense")
            {
                if (totalBalance < newTransaction.Amount)
                {
                    throw new Exception("Insufficient Balance");
                }
            }

            await transactionsService.AddTransactionsAsync(newTransaction);
            //Redirecting to the dashboard page
            newTransaction = new Transaction();
            newTransaction.TransactionDate = DateTime.Now;
            newTransaction.DebtDueDate = DateTime.Now;
            errorMessage = null;
            

        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;

        }

    }
    
    

}