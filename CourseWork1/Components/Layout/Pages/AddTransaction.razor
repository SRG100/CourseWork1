@page "/addtransaction"
@using CourseWork1.Models
@using CourseWork1.Services
@inject ITransactions transactionsService
@inject ITags tagService
@inject AuthenticationService authenticateUser

@* error message *@
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-parent">
        <div class="error-overlay">
            <dialog class="error-dialog" open>
                <h2>Error</h2>
                <p>@errorMessage</p>
                <button class="close-btn" @onclick="CloseDialog">❌</button>
            </dialog>
        </div>
    </div>

}

@* form for  adding transaction *@
<div class="container">
    <div class="signup-content">
        <form id="transaction-form" class="signup-form">
            <h3 class="form-title">Add Transaction</h3>

            <div class="form-group">
                <label for="transaction-name">Transaction Name:</label>
                <input type="text" class="form-input" id="transaction-name" placeholder="" @bind="newTransaction.TransactionName" />

            </div>

            <div class="form-group">
                <label for="transaction-type">Transaction Type:</label>
                <select class="form-input" id="transaction-type" @bind="newTransaction.TransactionType">
                    <option value=""></option>
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                    <option value="Debt">Debt</option>
                </select>
            </div>

            <div class="form-group">
                <label for="transaction-amount">Transaction Amount:</label>
                <input type="number" class="form-input" id="transaction-amount" placeholder="Amount" min="0" @bind="newTransaction.Amount" />
            </div>

            <div class="form-group">
                <label for="transaction-date">Transaction Date:</label>
                <input type="date" class="form-input" id="transaction-date" placeholder="Transaction Date" @bind="newTransaction.TransactionDate" />
            </div>
            @* if add new tag is clicked *@
            @if (!addnewTag)
            {
                <div class="form-group">
                    <label for="transaction-tags">Select Tag:</label>
                    <select class="form-input" id="transaction-tags" @bind="newTransaction.Tags">
                        <option value=""></option>
                        @* getting all the tag from the tag json file *@
                        @foreach (var Tag in existingTags)
                        {
                            <option value="@Tag.TransactionTag">@Tag.TransactionTag</option>
                        }
                    </select>
                </div>
            }

            @* if the tag is not selected then this section is showed *@
            @if (newTransaction.Tags == null && clicked==true)
            {
                <div class="form-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="AddCustomTagOption">Add Custom Tag :)</button>
                </div>
            }

           @* if the add new tag button is clicked then this section for adding new tag is shown *@
            @if (addnewTag)
            {

                <div class="form-group">
                    <input type="text" class="form-input" placeholder="Add Tag" @bind="newTransaction.Tags" />
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="AddCustomTag">Add Tag</button>
                </div>
            }
            @* this input feild are shown if the transaction type is debt *@
            @if (newTransaction.TransactionType == "Debt")
            {
                <div class="form-group">
                    <label for="debt-source">Debt Source:</label>
                    <input type="text" class="form-input" id="debt-source" placeholder="Debt Source" @bind="newTransaction.DebtSource" />
                </div>

                <div class="form-group">
                    <label for="debt-due-date">Debt Due Date:</label>
                    <input type="date" class="form-input" id="debt-due-date" placeholder="Debt Due Date" @bind="newTransaction.DebtDueDate" />
                </div>
            }



            <div class="form-group">
                <input type="text" class="form-input" placeholder="Add Note(Optional)" @bind="newTransaction.Note" />
            </div>

            
            <div class="form-group">
                <button type="button" class="form-submit" @onclick="AddNewTransaction">Add Transaction</button>
            </div>

        </form>
    </div>
</div>




@code {
    private Transaction newTransaction = new Transaction();
    private string errorMessage;
    private Boolean addnewTag = false;
    private Boolean addNote = false;
    private Boolean clicked = true;
    private List<Tags> existingTags = new List<Tags>();
    private Tags newTag = new Tags();
    private decimal totalBalance;
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;
    private decimal paidDebt;
    private decimal pendingDebt;

    //to close the error popup
    private void CloseDialog()
    {
        try
        {
            errorMessage = null;
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
        
    }

    //method that runs when initialized
    protected override async Task OnInitializedAsync()
    {
        try
        {

            existingTags = await tagService.GetTagsAsync();
            newTransaction.TransactionDate = DateTime.Now;
            newTransaction.DebtDueDate = DateTime.Now;
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }

    }
    //for to add custom tag to appear
    private async Task AddCustomTagOption()
    {
        try
        {
            addnewTag = true;
            clicked = false;

        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
        
    }
    //to add note 
    private async Task AddNote()
    {
        try
        {
            addNote = true;
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
        }

    }

    //to add custom tag
    private async Task AddCustomTag()
    {
        try
        {
            addnewTag = true;

            var existingTags = await tagService.GetTagsAsync();
            //checking if the custom tag already exists or not
            if (existingTags != null)
            {
                var sametag = existingTags.FirstOrDefault(et => et.TransactionTag == newTransaction.Tags);
                if (sametag != null)
                {
                    throw new Exception("This Tag exists, add a diffrent tag name");
                }

            }
            newTag.TransactionTag = newTransaction.Tags;
            await tagService.AddTagAsync(newTag);
            newTag = new Tags();
            errorMessage = "Tags Added";


        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }

    }

    //adding new transactions
    private async Task AddNewTransaction()
    {
        try
        {
            //checking for null or empty values
            if (string.IsNullOrWhiteSpace(newTransaction.Tags) || string.IsNullOrWhiteSpace(newTransaction.TransactionName) || string.IsNullOrWhiteSpace(newTransaction.TransactionType))
            {
                throw new Exception("Emply Space found, please insert data in all feild");
            }
            int currentUserID = authenticateUser.GetCurrentUser().UserId;
            newTransaction.User_id = currentUserID;

            //getting all the transactions of  a user 
            var existingTransactionsOfUser = await transactionsService.GetTransactionsByUserIdAsync(currentUserID);

            //calculationg the amounts for adding debt and expense
            totalIncome = existingTransactionsOfUser.Where(t => t.TransactionType == "Income").Sum(t => t.Amount);
            totalExpense = existingTransactionsOfUser.Where(t => t.TransactionType == "Expense").Sum(t => t.Amount);
            totalBalance = totalIncome - totalExpense;
            totalDebt = existingTransactionsOfUser.Where(t => t.TransactionType == "Debt").Sum(t => t.Amount);
            paidDebt = existingTransactionsOfUser.Where(t => t.TransactionType == "PaidDebt").Sum(t => t.Amount);
            pendingDebt = totalDebt - paidDebt;

            //if the expense is greater than the income then it is not allowed
            if (newTransaction.TransactionType == "Expense")
            {
                if (totalBalance < newTransaction.Amount)
                {
                    throw new Exception("Insufficient Balance");
                }
            }
            //if a debt is already pending then it is not allowed
            if (newTransaction.TransactionType == "Debt")
            {
                if (pendingDebt >0)
                {
                    throw new Exception("Please Pay your previous debt first");
                }
            }
            //if the amount section has nevative or xero value, error occurs
            if (newTransaction.Amount == 0 || newTransaction.Amount < 0)
            {
                throw new Exception("Please insert amount greater than zero");
            }

            await transactionsService.AddTransactionsAsync(newTransaction);
            //Redirecting to the dashboard page
            newTransaction = new Transaction();
            newTransaction.TransactionDate = DateTime.Now;
            newTransaction.DebtDueDate = DateTime.Now;
            errorMessage = null;
            

        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;

        }

    }
    
    

}